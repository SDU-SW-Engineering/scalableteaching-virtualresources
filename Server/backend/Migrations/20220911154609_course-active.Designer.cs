// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ScalableTeaching.Data;

namespace ScalableTeaching.Migrations
{
    [DbContext(typeof(VmDeploymentContext))]
    [Migration("20220911154609_course-active")]
    partial class courseactive
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("ScalableTeaching.Models.Course", b =>
                {
                    b.Property<Guid>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SDUCourseID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortCourseName")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)")
                        .HasComment("Should be between 3 and 6 characters");

                    b.Property<string>("UserUsername")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("The user responsible for the course i.e. the user that can make machines associated with the course");

                    b.HasKey("CourseID");

                    b.HasIndex("UserUsername");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("ScalableTeaching.Models.Group", b =>
                {
                    b.Property<Guid>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uuid");

                    b.Property<int>("GroupIndex")
                        .HasColumnType("integer");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.HasKey("GroupID");

                    b.HasIndex("CourseID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("ScalableTeaching.Models.GroupAssignment", b =>
                {
                    b.Property<Guid>("GroupID")
                        .HasColumnType("uuid");

                    b.Property<string>("UserUsername")
                        .HasColumnType("text");

                    b.HasKey("GroupID", "UserUsername");

                    b.HasIndex("UserUsername");

                    b.ToTable("GroupAssignments");
                });

            modelBuilder.Entity("ScalableTeaching.Models.Machine", b =>
                {
                    b.Property<Guid>("MachineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Apt")
                        .HasColumnType("text[]");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uuid");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<string>>("LinuxGroups")
                        .HasColumnType("text[]");

                    b.Property<int>("MachineCreationStatus")
                        .HasColumnType("integer");

                    b.Property<int>("Memory")
                        .HasColumnType("integer");

                    b.Property<int?>("OpenNebulaID")
                        .HasColumnType("integer");

                    b.Property<List<int>>("Ports")
                        .HasColumnType("integer[]");

                    b.Property<List<string>>("Ppa")
                        .HasColumnType("text[]");

                    b.Property<int>("Storage")
                        .HasColumnType("integer");

                    b.Property<string>("UserUsername")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VCPU")
                        .HasColumnType("integer");

                    b.HasKey("MachineID");

                    b.HasIndex("CourseID");

                    b.HasIndex("UserUsername");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("ScalableTeaching.Models.MachineAssignment", b =>
                {
                    b.Property<Guid>("MachineAssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("GroupID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MachineID")
                        .HasColumnType("uuid");

                    b.Property<string>("OneTimePassword")
                        .HasColumnType("text");

                    b.Property<string>("UserUsername")
                        .HasColumnType("text");

                    b.HasKey("MachineAssignmentID");

                    b.HasIndex("GroupID");

                    b.HasIndex("MachineID");

                    b.HasIndex("UserUsername");

                    b.ToTable("MachineAssignments");
                });

            modelBuilder.Entity("ScalableTeaching.Models.MachineDeletionRequest", b =>
                {
                    b.Property<Guid>("MachineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DeletionDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid?>("MachineID1")
                        .HasColumnType("uuid");

                    b.Property<string>("UserUsername")
                        .HasColumnType("text");

                    b.HasKey("MachineID");

                    b.HasIndex("MachineID1");

                    b.HasIndex("UserUsername");

                    b.ToTable("MachineDeletionRequests");
                });

            modelBuilder.Entity("ScalableTeaching.Models.MachineStatus", b =>
                {
                    b.Property<Guid>("MachineID")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("LastPoll")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("MachineCpuUtilizationPercent")
                        .HasColumnType("numeric");

                    b.Property<string>("MachineIp")
                        .HasColumnType("text");

                    b.Property<int?>("MachineLCMState")
                        .HasColumnType("integer");

                    b.Property<string>("MachineMac")
                        .HasColumnType("text");

                    b.Property<int?>("MachineMemmoryUtilizationBytes")
                        .HasColumnType("integer");

                    b.Property<int>("MachineState")
                        .HasColumnType("integer");

                    b.HasKey("MachineID");

                    b.ToTable("MachineStatuses");
                });

            modelBuilder.Entity("ScalableTeaching.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<int>("AccountType")
                        .HasColumnType("integer");

                    b.Property<string>("GeneralName")
                        .HasColumnType("text");

                    b.Property<string>("Mail")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.Property<string>("UserPrivateKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserPublicKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ScalableTeaching.Models.Course", b =>
                {
                    b.HasOne("ScalableTeaching.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScalableTeaching.Models.Group", b =>
                {
                    b.HasOne("ScalableTeaching.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ScalableTeaching.Models.GroupAssignment", b =>
                {
                    b.HasOne("ScalableTeaching.Models.Group", "Group")
                        .WithMany("GroupAssignments")
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScalableTeaching.Models.User", "User")
                        .WithMany("GroupAssignments")
                        .HasForeignKey("UserUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScalableTeaching.Models.Machine", b =>
                {
                    b.HasOne("ScalableTeaching.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScalableTeaching.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUsername")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScalableTeaching.Models.MachineAssignment", b =>
                {
                    b.HasOne("ScalableTeaching.Models.Group", null)
                        .WithMany("MachineAssignments")
                        .HasForeignKey("GroupID");

                    b.HasOne("ScalableTeaching.Models.Machine", "Machine")
                        .WithMany("MachineAssignments")
                        .HasForeignKey("MachineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ScalableTeaching.Models.User", null)
                        .WithMany("MachineAssignments")
                        .HasForeignKey("UserUsername");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("ScalableTeaching.Models.MachineDeletionRequest", b =>
                {
                    b.HasOne("ScalableTeaching.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineID1");

                    b.HasOne("ScalableTeaching.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserUsername");

                    b.Navigation("Machine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ScalableTeaching.Models.MachineStatus", b =>
                {
                    b.HasOne("ScalableTeaching.Models.Machine", "Machine")
                        .WithOne("MachineStatus")
                        .HasForeignKey("ScalableTeaching.Models.MachineStatus", "MachineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("ScalableTeaching.Models.Group", b =>
                {
                    b.Navigation("GroupAssignments");

                    b.Navigation("MachineAssignments");
                });

            modelBuilder.Entity("ScalableTeaching.Models.Machine", b =>
                {
                    b.Navigation("MachineAssignments");

                    b.Navigation("MachineStatus");
                });

            modelBuilder.Entity("ScalableTeaching.Models.User", b =>
                {
                    b.Navigation("GroupAssignments");

                    b.Navigation("MachineAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
