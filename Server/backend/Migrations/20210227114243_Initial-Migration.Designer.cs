// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Data;

namespace backend.Migrations
{
    [DbContext(typeof(VmDeploymentContext))]
    [Migration("20210227114243_Initial-Migration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("backend.Models.Course", b =>
                {
                    b.Property<Guid>("CouseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SDUCourseID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid")
                        .HasComment("The user responsible for the course i.e. the user that can make machines associated with the course");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("CouseID");

                    b.HasIndex("Username");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("backend.Models.Group", b =>
                {
                    b.Property<Guid>("GroupID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uuid");

                    b.Property<string>("GroupName")
                        .HasColumnType("text");

                    b.HasKey("GroupID");

                    b.HasIndex("CourseID");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("backend.Models.GroupAssignment", b =>
                {
                    b.Property<Guid>("GroupID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("GroupID", "UserID");

                    b.HasIndex("Username");

                    b.ToTable("GroupAssignments");
                });

            modelBuilder.Entity("backend.Models.Machine", b =>
                {
                    b.Property<Guid>("MachineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CourseID")
                        .HasColumnType("uuid");

                    b.Property<string>("HostName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("MachineID");

                    b.HasIndex("CourseID");

                    b.HasIndex("Username");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("backend.Models.MachineCredentail", b =>
                {
                    b.Property<Guid>("MachineID")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserID")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.HasKey("MachineID", "UserID");

                    b.HasIndex("Username");

                    b.ToTable("MachineCredentails");
                });

            modelBuilder.Entity("backend.Models.Port", b =>
                {
                    b.Property<Guid>("MachineID")
                        .HasColumnType("uuid");

                    b.Property<int>("PortNumber")
                        .HasColumnType("integer");

                    b.HasKey("MachineID", "PortNumber");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("backend.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("text");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Mail")
                        .HasColumnType("text");

                    b.Property<Guid>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("backend.Models.Course", b =>
                {
                    b.HasOne("backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Username");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Group", b =>
                {
                    b.HasOne("backend.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("backend.Models.GroupAssignment", b =>
                {
                    b.HasOne("backend.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Username");

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Machine", b =>
                {
                    b.HasOne("backend.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Username");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.MachineCredentail", b =>
                {
                    b.HasOne("backend.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("Username");

                    b.Navigation("Machine");

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Port", b =>
                {
                    b.HasOne("backend.Models.Machine", "Machine")
                        .WithMany()
                        .HasForeignKey("MachineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Machine");
                });
#pragma warning restore 612, 618
        }
    }
}
